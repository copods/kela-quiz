generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id              String            @id @default(uuid())
  name            String
  createdById     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation(fields: [createdById], references: [id])
  candidateResult CandidateResult[]
  section         Section[]
  test            Test[]
  userWorkspace   UserWorkspace[]

  @@unique([name, createdById])
}

model UserWorkspace {
  id          String    @id @default(uuid())
  workspaceId String
  userId      String
  roleId      String
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role      @relation(fields: [roleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([workspaceId, userId])
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  firstName     String
  lastName      String
  roleId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  role          Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Candidate     Candidate[]
  Option        Option[]
  password      Password?
  Question      Question[]
  Section       Section[]
  Test          Test[]
  userWorkspace UserWorkspace[]
  workspace     Workspace[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id            String          @id @default(cuid())
  name          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  users         User[]
  userWorkspace UserWorkspace[]
}

model Section {
  id                     String                   @id @default(cuid())
  name                   String
  description            String
  createdById            String
  deleted                Boolean                  @default(false)
  deletedAt              String?                  @default("na")
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  workspaceId            String?
  createdBy              User                     @relation(fields: [createdById], references: [id])
  workspace              Workspace?               @relation(fields: [workspaceId], references: [id])
  questions              Question[]
  sectionInCandidateTest SectionInCandidateTest[]
  sectionInTest          SectionInTest[]

  @@unique([name, deletedAt, deleted])
}

model Question {
  id                String              @id @default(cuid())
  question          String
  marks             Int                 @default(1)
  checkOrder        Boolean             @default(false)
  questionTypeId    String
  sectionId         String
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdBy         User                @relation(fields: [createdById], references: [id])
  questionType      QuestionType        @relation(fields: [questionTypeId], references: [id])
  section           Section             @relation(fields: [sectionId], references: [id])
  candidateQuestion CandidateQuestion[]
  correctAnswer     CorrectAnswer[]
  correctOptions    Option[]            @relation("correct_options_in_question")
  options           Option[]            @relation("options_in_question")
}

model CorrectAnswer {
  id         String    @id @default(cuid())
  answer     String
  order      Int
  questionId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  question   Question? @relation(fields: [questionId], references: [id])
}

model QuestionType {
  id          String     @id @default(cuid())
  value       String     @unique
  displayName String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model Option {
  id                String              @id @default(cuid())
  option            String
  questionId        String
  coInQuestionId    String?
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  coInQuestion      Question?           @relation("correct_options_in_question", fields: [coInQuestionId], references: [id], onDelete: Cascade)
  createdBy         User                @relation(fields: [createdById], references: [id])
  question          Question            @relation("options_in_question", fields: [questionId], references: [id], onDelete: Cascade)
  candidateQuestion CandidateQuestion[]
}

model Test {
  id                String              @id @default(cuid())
  name              String
  description       String
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deleted           Boolean             @default(false)
  deletedAt         String?             @default("na")
  workspaceId       String?
  createdBy         User                @relation(fields: [createdById], references: [id])
  workspace         Workspace?          @relation(fields: [workspaceId], references: [id])
  candidateResult   CandidateResult[]
  candidateTest     CandidateTest[]
  sections          SectionInTest[]
  SectionWiseResult SectionWiseResult[]

  @@unique([name, deletedAt, deleted])
}

model SectionInTest {
  id             String   @id @default(cuid())
  sectionId      String
  order          Int
  timeInSeconds  Int
  totalQuestions Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  testId         String
  section        Section  @relation(fields: [sectionId], references: [id])
  test           Test     @relation(fields: [testId], references: [id])
}

model Candidate {
  id          String            @id @default(cuid())
  email       String            @unique
  firstName   String?
  lastName    String?
  isQualified Boolean?
  createdById String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  OTP         Int               @default(0)
  createdBy   User              @relation(fields: [createdById], references: [id])
  results     CandidateResult[]
  tests       CandidateTest[]
}

model CandidateTest {
  id                 String                   @id @default(cuid())
  testId             String
  link               String?
  candidateId        String
  candidateStep      Json                     @default("{\"isSection\": false, \"nextRoute\": \"register\", \"currentSectionID\": null}")
  startedAt          DateTime?
  endAt              DateTime?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  linkSentOn         DateTime?                @default(now())
  candidate          Candidate                @relation(fields: [candidateId], references: [id])
  test               Test                     @relation(fields: [testId], references: [id])
  candidateResult    CandidateResult[]
  sections           SectionInCandidateTest[]
  sectionWiseResults SectionWiseResult[]

  @@unique([candidateId, testId])
}

model SectionInCandidateTest {
  id                      String                    @id @default(cuid())
  sectionId               String
  candidateTestId         String
  order                   Int
  startedAt               DateTime?
  endAt                   DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  candidateTest           CandidateTest             @relation(fields: [candidateTestId], references: [id])
  section                 Section                   @relation(fields: [sectionId], references: [id])
  questions               CandidateQuestion[]
  SectionWiseResult       SectionWiseResult[]
  timeInCandidateQuestion TimeInCandidateQuestion[]
}

model CandidateQuestion {
  id                       String                    @id @default(cuid())
  questionId               String
  status                   String                    @default("NOT_VIEWED")
  answers                  String[]
  order                    Int
  sectionInCandidateTestId String
  answeredAt               DateTime?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  question                 Question                  @relation(fields: [questionId], references: [id])
  sectionInCandidateTest   SectionInCandidateTest    @relation(fields: [sectionInCandidateTestId], references: [id])
  timeInCandidateQuestion  TimeInCandidateQuestion[]
  selectedOptions          Option[]
}

model TimeInCandidateQuestion {
  id         String                 @id @default(cuid())
  questionId String
  sectionId  String
  enterAt    DateTime
  exitAt     DateTime
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
  question   CandidateQuestion      @relation(fields: [questionId], references: [id])
  section    SectionInCandidateTest @relation(fields: [sectionId], references: [id])
}

model CandidateResult {
  id              String        @id @default(cuid())
  candidateId     String
  candidateTestId String
  totalQuestion   Int
  correctQuestion Int
  unanswered      Int
  testId          String
  isQualified     Boolean
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  workspaceId     String?
  candidate       Candidate     @relation(fields: [candidateId], references: [id])
  candidateTest   CandidateTest @relation(fields: [candidateTestId], references: [id])
  test            Test          @relation(fields: [testId], references: [id])
  workspace       Workspace?    @relation(fields: [workspaceId], references: [id])
}

model SectionWiseResult {
  id                       String                 @id @default(cuid())
  sectionInCandidateTestId String
  totalQuestion            Int
  correctQuestion          Int
  unanswered               Int
  testId                   String
  candidateTestId          String
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  candidateTest            CandidateTest          @relation(fields: [candidateTestId], references: [id])
  section                  SectionInCandidateTest @relation(fields: [sectionInCandidateTestId], references: [id])
  test                     Test                   @relation(fields: [testId], references: [id])
}
