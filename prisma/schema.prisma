datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roleId    String
  role      Role?     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  password  Password?
  notes     Note[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Section {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  testId    String?
  Test      Test?      @relation(fields: [testId], references: [id])
}

model Question {
  id             String       @id @default(cuid())
  question       String
  options        Option[]     @relation("options_in_question")
  correctOption  String[]
  correctAnswer  String?
  timeInSec      Int?
  imageUrl       String?
  marks          Int          @default(1)
  questionType   QuestionType @relation(fields: [questionTypeId], references: [id])
  section        Section      @relation(fields: [sectionId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sectionId      String
  questionTypeId String
}

model QuestionType {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]
}

model OptionType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Question  Option[]
}

model Option {
  id           String     @id @default(cuid())
  option       String
  imageUrl     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  question     Question   @relation("options_in_question", fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId   String
  optionType   OptionType @relation(fields: [optionTypeId], references: [id])
  optionTypeId String
}

model Test {
  id                     String       @id @default(cuid())
  name                   String       @unique
  totalQuestions         Int          @default(0)
  description            String
  totalDurationInSeconds Int
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  userResults            UserResult[]
  sections               Section[]
}

model Candidates {
  id            String     @id @default(cuid())
  email         String     @unique
  isQualified   Boolean
  userResult    UserResult @relation(fields: [userResultsId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userResultsId String
}

model UserResult {
  id          String       @id @default(cuid())
  userName    String
  test        Test         @relation(fields: [testId], references: [id])
  startedAt   DateTime 
  endAt       DateTime
  marks       Int
  totalMarks  Int
  isQualified Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  testId      String
  candidates  Candidates[]
}
