datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  firstName String
  lastName  String
  role      Role?     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  password  Password?
  notes     Note[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id        String   @id @default(cuid())
  title     String
  body      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
  tests      Test[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id             String       @id @default(cuid())
  question       String
  options        Option[]     @relation("options_in_question")
  correctOptions Option[]     @relation("correct_options_in_question")
  correctAnswer  String[]
  imageUrl       String?
  marks          Int          @default(1)
  questionType   QuestionType @relation(fields: [questionTypeId], references: [id])
  questionTypeId String
  section        Section      @relation(fields: [sectionId], references: [id])
  sectionId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model QuestionType {
  id        String     @id @default(cuid())
  name      String     @unique
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model OptionType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  questions Option[]
}

model Option {
  id             String     @id @default(cuid())
  option         String?
  optionType     OptionType @relation(fields: [optionTypeId], references: [id])
  optionTypeId   String
  imageUrl       String?
  question       Question   @relation("options_in_question", fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId     String
  coInQuestion   Question   @relation("correct_options_in_question", fields: [coInQuestionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coInQuestionId String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Test {
  id                     String       @id @default(cuid())
  name                   String       @unique
  description            String
  userResults            UserResult[]
  sections               Section[]
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

model Candidate {
  id          String       @id @default(cuid())
  email       String       @unique
  isQualified Boolean
  result      UserResult[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserResult {
  id          String    @id @default(cuid())
  candidates  Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  test        Test      @relation(fields: [testId], references: [id])
  testId      String
  marks       Int
  totalMarks  Int
  isQualified Boolean
  startedAt   DateTime
  endedAt     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
